"use strict";(self.webpackChunkeuclia_docs=self.webpackChunkeuclia_docs||[]).push([[162],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>y});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var p=n.createContext({}),d=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},s=function(e){var t=d(e.components);return n.createElement(p.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,s=r(e,["components","mdxType","originalType","parentName"]),m=d(a),u=o,y=m["".concat(p,".").concat(u)]||m[u]||c[u]||i;return a?n.createElement(y,l(l({ref:t},s),{},{components:a})):n.createElement(y,l({ref:t},s))}));function y(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=a.length,l=new Array(i);l[0]=u;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r[m]="string"==typeof e?e:o,l[1]=r;for(var d=2;d<i;d++)l[d]=a[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},2974:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>r,toc:()=>d});var n=a(7462),o=(a(7294),a(3905));const i={id:"sklearn",title:"Deploy your sklearn models",sidebar_label:"sklearn models",keywords:["jaqpot","deploy machine learning models","API","models","integrate models","deploy sklearn models and pipelines","deploy sklearn models"]},l=void 0,r={unversionedId:"sklearn",id:"sklearn",title:"Deploy your sklearn models",description:"Welcome to jaqpotpy documentation",source:"@site/docs/sklearn.md",sourceDirName:".",slug:"/sklearn",permalink:"/jaqpot-docs/docs/sklearn",draft:!1,tags:[],version:"current",frontMatter:{id:"sklearn",title:"Deploy your sklearn models",sidebar_label:"sklearn models",keywords:["jaqpot","deploy machine learning models","API","models","integrate models","deploy sklearn models and pipelines","deploy sklearn models"]},sidebar:"someSidebar",previous:{title:"Molecular_models",permalink:"/jaqpot-docs/docs/Molecular_models"},next:{title:"XGBoost models",permalink:"/jaqpot-docs/docs/xgboost"}},p={},d=[{value:"Welcome to jaqpotpy documentation",id:"welcome-to-jaqpotpy-documentation",level:2},{value:"About",id:"about",level:3},{value:"Contact",id:"contact",level:3},{value:"Install",id:"install",level:2},{value:"Install jaqpotpy",id:"install-jaqpotpy",level:3},{value:"Usage and initialization",id:"usage-and-initialization",level:2},{value:"Import Jaqpot",id:"import-jaqpot",level:3},{value:"Initialize jaqpot",id:"initialize-jaqpot",level:3},{value:"Let jaqpot know who you are",id:"let-jaqpot-know-who-you-are",level:3},{value:"Set Key without login",id:"set-key-without-login",level:3},{value:"Get the key from user interface",id:"get-the-key-from-user-interface",level:4},{value:"Deploy your models",id:"deploy-your-models",level:2},{value:"Model training and deployment",id:"model-training-and-deployment",level:3},{value:"Model training and deployment with Domain of applicability",id:"model-training-and-deployment-with-domain-of-applicability",level:3},{value:"Train and deploy a pipeline!",id:"train-and-deploy-a-pipeline",level:3},{value:"Train and deploy a model with train meta data",id:"train-and-deploy-a-model-with-train-meta-data",level:3},{value:"Example",id:"example",level:2}],s={toc:d},m="wrapper";function c(e){let{components:t,...i}=e;return(0,o.kt)(m,(0,n.Z)({},s,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"welcome-to-jaqpotpy-documentation"},"Welcome to jaqpotpy documentation"),(0,o.kt)("h3",{id:"about"},"About"),(0,o.kt)("p",null,"jaqpotpy is a library that lets you deploy and share seemingless easy machine learning and statistal models developed with ",(0,o.kt)("a",{parentName:"p",href:"https://scikit-learn.org/stable/"},"sklearn")," over the web."),(0,o.kt)("p",null,"It is created by the ",(0,o.kt)("a",{parentName:"p",href:"https://www.chemeng.ntua.gr/labs/control_lab/"},"Unit of Process Control and Informatics in the School of Chemical Engineering")," at the National Technical University of Athens and supported by ",(0,o.kt)("a",{parentName:"p",href:"https://www.euclia.xyz"},"Euclia"),"."),(0,o.kt)("h3",{id:"contact"},"Contact"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"mailto:contact@euclia.xyz"},"contact@euclia.xyz")),(0,o.kt)("h2",{id:"install"},"Install"),(0,o.kt)("h3",{id:"install-jaqpotpy"},"Install jaqpotpy"),(0,o.kt)("p",null,"Jaqpotpy can be installed as a pypi package."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"pip install jaqpotpy")," "),(0,o.kt)("h2",{id:"usage-and-initialization"},"Usage and initialization"),(0,o.kt)("h3",{id:"import-jaqpot"},"Import Jaqpot"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"from jaqpotpy import Jaqpot")),(0,o.kt)("h3",{id:"initialize-jaqpot"},"Initialize jaqpot"),(0,o.kt)("p",null,"Jaqpot API and services are available at the base path ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://api.jaqpot.org/jaqpot/services/"},"https://api.jaqpot.org/jaqpot/services/"))," "),(0,o.kt)("p",null,"Swagger and OpenAPI definition of the API can be found at ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://api.jaqpot.org/jaqpot/swagger/"},"https://api.jaqpot.org/jaqpot/swagger/"))," "),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"jaqpot = Jaqpot()"),"  initializes jaqpot upon the standard available API that\nis integrated with the application and user interface at ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://app.jaqpot.org/"},"https://app.jaqpot.org/"))," ."),(0,o.kt)("p",null,"Alternative installations can be used. If so jaqpotpy and jaqpot should be initialized to the base url of the installation\n",(0,o.kt)("strong",{parentName:"p"},"etc:")," ",(0,o.kt)("inlineCode",{parentName:"p"},'jaqpot = Jaqpot("https://api.jaqpot.org/jaqpot/services/")')),(0,o.kt)("h3",{id:"let-jaqpot-know-who-you-are"},"Let jaqpot know who you are"),(0,o.kt)("p",null,"Login and have access on the jaqpot services"),(0,o.kt)("p",null,"In order to do so you can use the functions:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"jaqpot.login('username', 'password')"))),(0,o.kt)("p",null,"Will login and set the api key that is needed."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"jaqpot.request_key('username', 'password')"))),(0,o.kt)("p",null,"Same as above you request the key and set it on jaqpot"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"jaqpot.request_key_safe()"))),(0,o.kt)("p",null,"Will ask the user for the username and password by hidding the password if\njaqpot is used through a jupiter notebook etc"),(0,o.kt)("h3",{id:"set-key-without-login"},"Set Key without login"),(0,o.kt)("p",null,"Some users may have logged in through google or github. At the account page\na user can find an api key that can be used in order to have access on the services.\nThese keys have short life and should be updated on each login."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},'jaqpot.set_api_key("api_key")'))),(0,o.kt)("h4",{id:"get-the-key-from-user-interface"},"Get the key from user interface"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Get key",src:a(95).Z,width:"633",height:"308"})),(0,o.kt)("p",null,"The API key can be retrieved from the user interface. It will download a text file that contains the API key."),(0,o.kt)("h2",{id:"deploy-your-models"},"Deploy your models"),(0,o.kt)("p",null,"Once initialized the models can then be deployed!"),(0,o.kt)("p",null,"Bellow you can download a sample dataset that contains the ",(0,o.kt)("strong",{parentName:"p"},"name of the country (ountry)")," ,  ",(0,o.kt)("strong",{parentName:"p"},"Gross domestic product (GDP)"),", ",(0,o.kt)("strong",{parentName:"p"},"labor force growth (LFG)"),",\n",(0,o.kt)("strong",{parentName:"p"},"equipment investment (EQP)"),", ",(0,o.kt)("strong",{parentName:"p"},"nonequipment investment (NEQ)")," and ",(0,o.kt)("strong",{parentName:"p"},"relative GDP gap (GAP)")),(0,o.kt)("p",null,"Task:"),(0,o.kt)("p",null,"Model the GDP. Pay attention to the diagnostics and suitability of your final model."),(0,o.kt)("a",{target:"_blank",href:"/docs/assets/gdp-countries.csv",download:"gdp.csv"},"Download sample dataset"),(0,o.kt)("h3",{id:"model-training-and-deployment"},"Model training and deployment"),(0,o.kt)("p",null,"An example code that demonstrates a model deployemnt."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"Warning! One of the things that may differ from simpler training and validation routes is that you need to train your model with a pandas dataframe as input and not with Numpy arrays!")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from jaqpotpy import Jaqpot\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n\ndf = pd.read_csv('/path/to/gdp.csv')\nlm = LinearRegression()\n\ny = df['GDP']\nX = df[['LFG', 'EQP', 'NEQ', 'GAP']]\n\nmodel = lm.fit(X=X, y=y)\n\njaqpot.deploy_sklearn(model, X, y, title=\"Title\", description=\"Describe\")\n")),(0,o.kt)("p",null,"The function will inform you about the model id that is created and is available through the user interface and the API."),(0,o.kt)("admonition",{title:"Result",type:"info"},(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"INFO - Model with id: <model_id> created. Visit the application to proceed"))),(0,o.kt)("h3",{id:"model-training-and-deployment-with-domain-of-applicability"},"Model training and deployment with Domain of applicability"),(0,o.kt)("p",null,"Domain of applicability contains knowledge or information on which the training set of the model has been developed, and for which it is applicable to make predictions for new instances."),(0,o.kt)("a",{target:"_blank",href:"https://en.wikipedia.org/wiki/Applicability_domain"},"About applicability domain"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from jaqpotpy import Jaqpot\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n\ndf = pd.read_csv('/path/to/gdp.csv')\nlm = LinearRegression()\n\ny = df['GDP']\nX = df[['LFG', 'EQP', 'NEQ', 'GAP']]\n\nmodel = lm.fit(X=X, y=y)\n\njaqpot.deploy_sklearn(model, X, y, title=\"Title\", description=\"Describe\", doa=X)\n\n")),(0,o.kt)("admonition",{title:"Result",type:"info"},(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"INFO - Model with id: <model_id> created. Storing Domain of applicability"),(0,o.kt)("li",{parentName:"ul"},"INFO - Stored Domain of applicability. Visit the application to proceed"))),(0,o.kt)("h3",{id:"train-and-deploy-a-pipeline"},"Train and deploy a pipeline!"),(0,o.kt)("p",null,"Most models contain some preprocessing of the data and that is needed upon the prediction. In order to have a model that preprocess the data the model developer need to train and deploy a pipeline! "),(0,o.kt)("p",null,"It can be used as a standard scaler or a text tokenization or whatever the sklearn library offers."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from jaqpotpy import Jaqpot\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\n\n\ndf = pd.read_csv('/path/to/gdp.csv')\nlm = LinearRegression()\n\ny = df['GDP']\nX = df[['LFG', 'EQP', 'NEQ', 'GAP']]\n\npipe = Pipeline([('scaler', StandardScaler()), ('linear', LinearRegression())])\n\npipeline = pipe.fit(X=X, y=y)\n\npipeline.predict(X)\n\njaqpot.deploy_sklearn(pipeline, X, y, title=\"Pipeline\", description=\"A pipeline deployment\")\n\n")),(0,o.kt)("admonition",{title:"Result",type:"info"},(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"INFO - Model with id: <model_id> created. Visit the application to proceed"))),(0,o.kt)("h3",{id:"train-and-deploy-a-model-with-train-meta-data"},"Train and deploy a model with train meta data"),(0,o.kt)("p",null,"If you wish to upload meta data add the desired True flag as input to the function."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"from jaqpotpy import Jaqpot\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\n\n\ndf = pd.read_csv('/path/to/gdp.csv')\nlm = LinearRegression()\n\ny = df['GDP']\nX = df[['LFG', 'EQP', 'NEQ', 'GAP']]\n\npipe = Pipeline([('scaler', StandardScaler()), ('linear', LinearRegression())])\n\npipeline = pipe.fit(X=X, y=y)\n\npipeline.predict(X)\n\njaqpot.deploy_sklearn(pipeline, X, y, title=\"Pipeline\", description=\"A pipeline deployment\", model_meta=True)\n\n")),(0,o.kt)("admonition",{title:"Result",type:"info"},(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"INFO - Model with id: <model_id> created. Visit the application to proceed"))),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"from jaqpotpy import Jaqpot\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\njaqpot = Jaqpot()\njaqpot.request_key_safe()\n\ndf = pd.read_csv('/path/to/gdp.csv')\nlm = LinearRegression()\n\ny = df['GDP']\nX = df[['LFG', 'EQP', 'NEQ', 'GAP']]\n\nmodel = lm.fit(X=X, y=y)\n\njaqpot.deploy_sklearn(model, X, y, title=\"Title\", description=\"Describe\", doa=X)\n\n")),(0,o.kt)("admonition",{title:"Result",type:"info"},(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"INFO - Model with id: <model_id> created. Storing Domain of applicability"),(0,o.kt)("li",{parentName:"ul"},"INFO - Stored Domain of applicability. Visit the application to proceed"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Your model is then available at ",(0,o.kt)("a",{parentName:"strong",href:"https://app.jaqpot.org"},"https://app.jaqpot.org"))))}c.isMDXComponent=!0},95:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/getkey-b24fa31a9fc7c197d966c5f7808c4ad2.png"}}]);