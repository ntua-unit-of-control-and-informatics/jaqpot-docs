"use strict";(self.webpackChunkeuclia_docs=self.webpackChunkeuclia_docs||[]).push([[261],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>v});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=a.createContext({}),s=function(e){var t=a.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=s(r),d=n,v=p["".concat(c,".").concat(d)]||p[d]||m[d]||o;return r?a.createElement(v,l(l({ref:t},u),{},{components:r})):a.createElement(v,l({ref:t},u))}));function v(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,l=new Array(o);l[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[p]="string"==typeof e?e:n,l[1]=i;for(var s=2;s<o;s++)l[s]=r[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},3368:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var a=r(7462),n=(r(7294),r(3905));const o={id:"evaluator",title:"Evaluators",sidebar_label:"evaluator"},l=void 0,i={unversionedId:"evaluator",id:"evaluator",title:"Evaluators",description:"Main Import",source:"@site/docs/evaluator.md",sourceDirName:".",slug:"/evaluator",permalink:"/docs/evaluator",draft:!1,tags:[],version:"current",frontMatter:{id:"evaluator",title:"Evaluators",sidebar_label:"evaluator"},sidebar:"someSidebar",previous:{title:"doa",permalink:"/docs/doa"},next:{title:"Molecular_models",permalink:"/docs/Molecular_models"}},c={},s=[{value:"Main Import",id:"main-import",level:2},{value:"Evaluator",id:"evaluator",level:3},{value:"CLASS: Evaluator()",id:"class-evaluator",level:4}],u={toc:s},p="wrapper";function m(e){let{components:t,...r}=e;return(0,n.kt)(p,(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"main-import"},"Main Import"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"import jaqpotpy.models.evaluator")),(0,n.kt)("h3",{id:"evaluator"},"Evaluator"),(0,n.kt)("h4",{id:"class-evaluator"},"CLASS: Evaluator()"),(0,n.kt)("p",null,"This object uses an evaluator to validate models on a validation dataset."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"import jaqpotpy.models.evaluator import Evaluator\nval = Evaluator()\n")),(0,n.kt)("p",null,"You can register your own metrics from sklearn and also register a SmilesDataset(see more on Molecular_datasets docs).",(0,n.kt)("br",{parentName:"p"}),"\n","sklearn: ",(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("a",{parentName:"strong",href:"https://scikit-learn.org/stable/"},"https://scikit-learn.org/stable/"))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"from sklearn.metrics import accuracy_score\n# Register a metric - scoring function\nval.register_scoring_function('ACC', accuracy_score)\n# Register a SmilesDataset \nval.dataset = validation_dataset\n")))}m.isMDXComponent=!0}}]);