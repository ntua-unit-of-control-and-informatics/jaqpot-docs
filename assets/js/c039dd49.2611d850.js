"use strict";(self.webpackChunkeuclia_docs=self.webpackChunkeuclia_docs||[]).push([[306],{3905:(e,a,t)=>{t.d(a,{Zo:()=>c,kt:()=>f});var r=t(7294);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var d=r.createContext({}),s=function(e){var a=r.useContext(d),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},c=function(e){var a=s(e.components);return r.createElement(d.Provider,{value:a},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},u=r.forwardRef((function(e,a){var t=e.components,n=e.mdxType,o=e.originalType,d=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=s(t),u=n,f=p["".concat(d,".").concat(u)]||p[u]||m[u]||o;return t?r.createElement(f,i(i({ref:a},c),{},{components:t})):r.createElement(f,i({ref:a},c))}));function f(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var o=t.length,i=new Array(o);i[0]=u;var l={};for(var d in a)hasOwnProperty.call(a,d)&&(l[d]=a[d]);l.originalType=e,l[p]="string"==typeof e?e:n,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4952:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>d,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=t(7462),n=(t(7294),t(3905));const o={id:"doa",title:"Domain of Applicability",sidebar_label:"doa",keywords:["fit","predict"]},i=void 0,l={unversionedId:"doa",id:"doa",title:"Domain of Applicability",description:"Main Import",source:"@site/docs/doa.md",sourceDirName:".",slug:"/doa",permalink:"/docs/doa",draft:!1,tags:[],version:"current",frontMatter:{id:"doa",title:"Domain of Applicability",sidebar_label:"doa",keywords:["fit","predict"]},sidebar:"someSidebar",previous:{title:"Molecular_datasets",permalink:"/docs/Molecular_datasets"},next:{title:"evaluator",permalink:"/docs/evaluator"}},d={},s=[{value:"Main Import",id:"main-import",level:2},{value:"Leverage",id:"leverage",level:3},{value:"CLASS Leverage()",id:"class-leverage",level:4},{value:"Example",id:"example",level:5},{value:"MeanVar",id:"meanvar",level:3},{value:"CLASS: MeanVar()",id:"class-meanvar",level:4},{value:"SmilesLeverage",id:"smilesleverage",level:3},{value:"CLASS SmilesLeverage()",id:"class-smilesleverage",level:4}],c={toc:s},p="wrapper";function m(e){let{components:a,...t}=e;return(0,n.kt)(p,(0,r.Z)({},c,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"main-import"},"Main Import"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"import jaqpotpy.doa.doa")),(0,n.kt)("p",null,"Implementing domain of applicability methods for molecules."),(0,n.kt)("h3",{id:"leverage"},"Leverage"),(0,n.kt)("h4",{id:"class-leverage"},"CLASS Leverage()"),(0,n.kt)("p",null,"Implements DOA method leverage.Initialized upon training data and holds the doa matrix and the threshold 'A' value. Calculates the DOA for a new instance of data or array of data."),(0,n.kt)("h5",{id:"example"},"Example"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"from jaqpotpy.doa.doa import Leverage\n# Create DOA object\ndoa = Leverage()\n")),(0,n.kt)("p",null,"You can perform various actions once instantiating a Leverage object:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"# Use numpy array of features to fit the DOA\n# .fit calculates doa_matrix and threshold value\ndoa.fit(np.array)\n# Check doa matrix\ndoa.doa_matrix\n# Check threshold\ndoa.a\n# Predict if unseen features are on doa  (must be numpy array)\ndoa.predict(np.array)\n")),(0,n.kt)("h3",{id:"meanvar"},"MeanVar"),(0,n.kt)("h4",{id:"class-meanvar"},"CLASS: MeanVar()"),(0,n.kt)("p",null,"Implements Mean and Variance domain of applicability. Initialized upon training data and holds the doa mean and the variance of the data.Calculates the mean and variance for a new instance of data or array of data and decides if in AD."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"from jaqpotpy.doa.doa import MeanVar\n# Create DOA object\ndoa = MeanVar()\n")),(0,n.kt)("p",null,"You can perform same actions once instantiating a MeanVar object:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"# Use numpy array of features to fit DOA\n# .fit calculates doa_matrix and threshold value\ndoa.fit(np.array)\n# Check doa matrix\ndoa.doa_matrix\n# Check threshold\ndoa.a\n# Predict if unseen features are on doa  (must be numpy array)\ndoa.predict(np.array)\n")),(0,n.kt)("h3",{id:"smilesleverage"},"SmilesLeverage"),(0,n.kt)("h4",{id:"class-smilesleverage"},"CLASS SmilesLeverage()"),(0,n.kt)("p",null,"Implements DOA method leverage given an array of smiles. Descriptors and data matrix is calculated with rdkit descriptors. Initialized upon training data and holds the doa matrix and the threshold 'A' value.\nCalculates the DOA for a new instance of data or array of data."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"from jaqpotpy.doa.doa import SmilesLeverage\n# Create DOA object\ndoa = SmilesLeverage()\n")),(0,n.kt)("p",null,"You can perform various actions once instantiating a SmilesLeverage object:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"# Use smiles strings to fit the DOA\nsmiles = ['c1cc(O)ccc1', 'O=Cc1ccc(O)c(OC)c1']\ndoa.fit(smiles)\n# Check doa matrix\ndoa.doa_matrix\n# Check threshold\ndoa.a\n# Predict if unseen SMILES are on doa (must be Smiles string)\ndoa.predict(smiles_)\n")))}m.isMDXComponent=!0}}]);