"use strict";(self.webpackChunkeuclia_docs=self.webpackChunkeuclia_docs||[]).push([[881],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),i=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=i(e.components);return n.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=i(a),u=r,h=c["".concat(p,".").concat(u)]||c[u]||m[u]||o;return a?n.createElement(h,l(l({ref:t},d),{},{components:a})):n.createElement(h,l({ref:t},d))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[c]="string"==typeof e?e:r,l[1]=s;for(var i=2;i<o;i++)l[i]=a[i];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},3182:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>i});var n=a(7462),r=(a(7294),a(3905));const o={id:"javascript",title:"Javascript Client",sidebar_label:"Javascript"},l=void 0,s={unversionedId:"javascript",id:"javascript",title:"Javascript Client",description:"The Javascript Jaqpot client has been developed in order to pull and use both models and datasets, stored in the Jaqpot API with ease.",source:"@site/docs/javascript.md",sourceDirName:".",slug:"/javascript",permalink:"/docs/javascript",draft:!1,tags:[],version:"current",frontMatter:{id:"javascript",title:"Javascript Client",sidebar_label:"Javascript"},sidebar:"someSidebar",previous:{title:"Python",permalink:"/docs/python"},next:{title:"Go",permalink:"/docs/golang"}},p={},i=[{value:"Installation",id:"installation",level:2},{value:"Create a Client instance",id:"create-a-client-instance",level:2},{value:"Predictions",id:"predictions",level:2},{value:"Predict Method",id:"predict-method",level:3},{value:"Models",id:"models",level:2},{value:"getModelById Method",id:"getmodelbyid-method",level:3},{value:"getMyModels Method",id:"getmymodels-method",level:3},{value:"getOrgsModels Method",id:"getorgsmodels-method",level:3},{value:"Datasets",id:"datasets",level:2},{value:"getDataset Method",id:"getdataset-method",level:3},{value:"Features",id:"features",level:2},{value:"getFeature Method",id:"getfeature-method",level:3},{value:"Tasks",id:"tasks",level:2},{value:"getTask Method",id:"gettask-method",level:3},{value:"DOA",id:"doa",level:2},{value:"getModelsDoa Method",id:"getmodelsdoa-method",level:3}],d={toc:i},c="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The Javascript Jaqpot client has been developed in order to pull and use both models and datasets, stored in the Jaqpot API with ease. "),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"Install the Javascript client through your terminal with npm:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"npm i @euclia/jaqpot-client\n")),(0,r.kt)("h2",{id:"create-a-client-instance"},"Create a Client instance"),(0,r.kt)("p",null,"Initialize a new Jaqpot client object.\nFind more on finding your authentication token ",(0,r.kt)("a",{parentName:"p",href:"https://link-to-token.gr"},"here"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import {IJaqpotClient, JaqpotClientFactory} from \'../src/client\'\n\n// Instanciate the Jaqpot Client \nconst jaqpotClient:IJaqpotClient = new JaqpotClientFactory("https://api.jaqpot.org/jaqpot/services").getClient();\n\n// Set your authorization token. \n// You can get it from your Jaqpot Dashboard by clicking "Get Key".\nconst token:string = "myAuthToken"   \n')),(0,r.kt)("h2",{id:"predictions"},"Predictions"),(0,r.kt)("p",null,"Import the appropriate structures."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Prediction } from '../src/models/jaqpot.models'\n")),(0,r.kt)("h3",{id:"predict-method"},"Predict Method"),(0,r.kt)("p",null,"Use the predict method to make predictions.\nFind more on selecting the appropriate IDs ",(0,r.kt)("a",{parentName:"p",href:"https://link-to-ids.gr"},"here"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'// Set the model\'s ID.\nlet modelId = "myModelId"\n\n// Construct the input data.\n// In this example we fill two rows of the prediction dataset.\nlet data = {}\nlet input_data = []\n\ndata["Feature_A"] = 0.2\ndata["Feature_B"] = 0.1\ndata["Feature_C"] = 0.3\ninput_data.push(data)\n\ndata["Feature_A"] = 0.6\ndata["Feature_B"] = 0.9\ndata["Feature_C"] = 0.1\ninput_data.push(data)\n\n// Make a prediction.\njaqpotClient.predict(modelId, input_data, token).then(\n    (resp:Prediction) =>{\n        console.log(resp)\n        }).catch(err => {\n            console.log(err)\n        })\n\n    })\n')),(0,r.kt)("h2",{id:"models"},"Models"),(0,r.kt)("p",null,"Import the appropriate structures."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Model, Models } from '../src/models/jaqpot.models'\n")),(0,r.kt)("h3",{id:"getmodelbyid-method"},"getModelById Method"),(0,r.kt)("p",null,"Use the getModelById method to get a model by it's ID.\nFind more on selecting the appropriate IDs ",(0,r.kt)("a",{parentName:"p",href:"https://link-to-ids.gr"},"here"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'// Set the model\'s ID.\nlet modelId = "myModelId"\n\n// Get the model with ID myModelId\njaqpotClient.getModelById(modelId, token).then(\n    (resp:Model) =>{\n        console.log(resp)\n        }).catch(err => {\n            console.log(err)\n        })\n\n    })\n')),(0,r.kt)("h3",{id:"getmymodels-method"},"getMyModels Method"),(0,r.kt)("p",null,"Use the getMyModels method to get an array of your models.\nFind more on selecting the appropriate IDs ",(0,r.kt)("a",{parentName:"p",href:"https://link-to-ids.gr"},"here"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// Set the upper and lower bounds of your search.\nlet lower = 0\nlet upper = 10\n\n// Get your first 10 models.\njaqpotClient.getMyModels(token, lower, upper).then(\n    (resp:Models) =>{\n        console.log(resp)\n        }).catch(err => {\n            console.log(err)\n        })\n\n    })\n")),(0,r.kt)("h3",{id:"getorgsmodels-method"},"getOrgsModels Method"),(0,r.kt)("p",null,"Use the getOrgsModels method to get an array of an organization's models.\nFind more on selecting the appropriate IDs ",(0,r.kt)("a",{parentName:"p",href:"https://link-to-ids.gr"},"here"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// Set the Organization's ID.\nlet orgId = 'MyOrgId'\n\n// Set the upper and lower bounds of your search.\nlet lower = 0\nlet upper = 10\n\n// Get the first 10 models of the organization with ID myOrgId.\njaqpotClient.getOrgsModels(orgId, lower, upper, token).then(\n    (resp:Models) =>{\n        console.log(resp)\n        }).catch(err => {\n            console.log(err)\n        })\n    })\n")),(0,r.kt)("h2",{id:"datasets"},"Datasets"),(0,r.kt)("p",null,"Import the appropriate structures."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Dataset } from '../src/models/jaqpot.models'\n")),(0,r.kt)("h3",{id:"getdataset-method"},"getDataset Method"),(0,r.kt)("p",null,"Use the getDataset method to get a Jaqpot Dataset by it's ID.\nFind more on selecting the appropriate IDs ",(0,r.kt)("a",{parentName:"p",href:"https://link-to-ids.gr"},"here"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// Set the Dataset's ID.\nlet datasetId = 'myDatasetId'\n\n// Get the Dataset with ID myDatasetId.\njaqpotClient.getDataset(datasetId, token).then(\n            (resp:Dataset) =>{\n                console.log(resp)\n                expect(resp._id).to.equal(\"myDatasetId\")\n            }\n        ).catch(err=>{console.log(err)})\n    })\n")),(0,r.kt)("h2",{id:"features"},"Features"),(0,r.kt)("p",null,"Import the appropriate structures."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Feature } from '../src/models/jaqpot.models'\n")),(0,r.kt)("h3",{id:"getfeature-method"},"getFeature Method"),(0,r.kt)("p",null,"Use the getFeature method to get a Jaqpot feature by it's ID.\nFind more on selecting the appropriate IDs ",(0,r.kt)("a",{parentName:"p",href:"https://link-to-ids.gr"},"here"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// Set the features's ID.\nlet featureId = 'myFeatureId'\n\n// Get the Feature with ID myFeatureId.\njaqpotClient.getFeature(featureId, token).then(\n            (resp:Feature) =>{\n                console.log(resp)\n            }\n        ).catch(err=>{console.log(err)})\n    })\n")),(0,r.kt)("h2",{id:"tasks"},"Tasks"),(0,r.kt)("p",null,"Import the appropriate structures."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Task } from '../src/models/jaqpot.models'\n")),(0,r.kt)("h3",{id:"gettask-method"},"getTask Method"),(0,r.kt)("p",null,"Use the getTask method to get a Jaqpot task by it's ID.\nFind more on selecting the appropriate IDs ",(0,r.kt)("a",{parentName:"p",href:"https://link-to-ids.gr"},"here"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// Set the task's ID.\nlet taskId = 'myTaskId'\n\n// Get the Task with ID myTaskId.\njaqpotClient.getTask(taskId, token).then(\n            (resp:Task) =>{\n                console.log(resp)\n            }\n        ).catch(err=>{console.log(err)})\n    })\n")),(0,r.kt)("h2",{id:"doa"},"DOA"),(0,r.kt)("p",null,"Import the appropriate structures."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Doa } from '../src/models/jaqpot.models'\n")),(0,r.kt)("h3",{id:"getmodelsdoa-method"},"getModelsDoa Method"),(0,r.kt)("p",null,"Use the getModelsDoa method to get the domain of applicabillity (DOA) of a model, by the model's ID.\nFind more on selecting the appropriate IDs ",(0,r.kt)("a",{parentName:"p",href:"https://link-to-ids.gr"},"here"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'// Set the model\'s ID.\nlet modelId = "myModelId"\n\n// Get the DOA of the model with ID myModelId.\njaqpotClient.getTask(modelId, token).then(\n            (resp:Doa) =>{\n                console.log(resp)\n            }\n        ).catch(err=>{console.log(err)})\n    })\n')))}m.isMDXComponent=!0}}]);