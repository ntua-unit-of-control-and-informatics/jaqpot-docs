"use strict";(self.webpackChunkeuclia_docs=self.webpackChunkeuclia_docs||[]).push([[811],{3905:(e,r,a)=>{a.d(r,{Zo:()=>p,kt:()=>f});var t=a(7294);function n(e,r,a){return r in e?Object.defineProperty(e,r,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[r]=a,e}function o(e,r){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var r=1;r<arguments.length;r++){var a=null!=arguments[r]?arguments[r]:{};r%2?o(Object(a),!0).forEach((function(r){n(e,r,a[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(a,r))}))}return e}function i(e,r){if(null==e)return{};var a,t,n=function(e,r){if(null==e)return{};var a,t,n={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],r.indexOf(a)>=0||(n[a]=e[a]);return n}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],r.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=t.createContext({}),c=function(e){var r=t.useContext(s),a=r;return e&&(a="function"==typeof e?e(r):l(l({},r),e)),a},p=function(e){var r=c(e.components);return t.createElement(s.Provider,{value:r},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},u=t.forwardRef((function(e,r){var a=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(a),u=n,f=m["".concat(s,".").concat(u)]||m[u]||d[u]||o;return a?t.createElement(f,l(l({ref:r},p),{},{components:a})):t.createElement(f,l({ref:r},p))}));function f(e,r){var a=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var o=a.length,l=new Array(o);l[0]=u;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i[m]="string"==typeof e?e:n,l[1]=i;for(var c=2;c<o;c++)l[c]=a[c];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},128:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var t=a(7462),n=(a(7294),a(3905));const o={id:"Molecular_models",title:"Molecular",sidebar_label:"Molecular_models"},l=void 0,i={unversionedId:"Molecular_models",id:"Molecular_models",title:"Molecular",description:"Main Import",source:"@site/docs/Molecular_models.md",sourceDirName:".",slug:"/Molecular_models",permalink:"/jaqpot-docs/docs/Molecular_models",draft:!1,tags:[],version:"current",frontMatter:{id:"Molecular_models",title:"Molecular",sidebar_label:"Molecular_models"},sidebar:"someSidebar",previous:{title:"evaluator",permalink:"/jaqpot-docs/docs/evaluator"},next:{title:"sklearn models",permalink:"/jaqpot-docs/docs/sklearn"}},s={},c=[{value:"Main Import",id:"main-import",level:2},{value:"Creating Molecular models with integration for libraries like sklearn, pytorch, pytorch-geometric",id:"creating-molecular-models-with-integration-for-libraries-like-sklearn-pytorch-pytorch-geometric",level:2},{value:"MolecularSKLearn",id:"molecularsklearn",level:3},{value:"CLASS: MolecularSKLearn(dataset,doa,model,eval=None,preprocess=None)",id:"class-molecularsklearndatasetdoamodelevalnonepreprocessnone",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Defining arguments before training an SKlearn molecular model",id:"defining-arguments-before-training-an-sklearn-molecular-model",level:5}],p={toc:c},m="wrapper";function d(e){let{components:r,...a}=e;return(0,n.kt)(m,(0,t.Z)({},p,a,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"main-import"},"Main Import"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"import jaqpotpy.models")),(0,n.kt)("h2",{id:"creating-molecular-models-with-integration-for-libraries-like-sklearn-pytorch-pytorch-geometric"},"Creating Molecular models with integration for libraries like sklearn, pytorch, pytorch-geometric"),(0,n.kt)("h3",{id:"molecularsklearn"},"MolecularSKLearn"),(0,n.kt)("h4",{id:"class-molecularsklearndatasetdoamodelevalnonepreprocessnone"},"CLASS: MolecularSKLearn(dataset,doa,model,eval=None,preprocess=None)"),(0,n.kt)("p",null,"Class for creating and training a model provided by sklearn model (SVM,Random Forest, ...).",(0,n.kt)("br",{parentName:"p"}),"\n","sklearn: ",(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("a",{parentName:"strong",href:"https://scikit-learn.org/stable/"},"https://scikit-learn.org/stable/"))),(0,n.kt)("h4",{id:"parameters"},"Parameters"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"dataset(MolecularDataset)"),": Dataset for the training procedure. Must be created from jaqpotpy. Example: SmilesDataset (See more on Molecular_dataset docs).")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"doa(DOA)"),": Domain of applicability function. Check doa docs for more.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"model(Any)"),":Sklearn model for training.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"eval(Evaluator,optional)"),": Evaluator for the model. See evaluator docs for more.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("inlineCode",{parentName:"p"},"preprocess(Preprocesses, optional)"),": Preprocessing function. See more on preprocesses docs."))),(0,n.kt)("h5",{id:"defining-arguments-before-training-an-sklearn-molecular-model"},"Defining arguments before training an SKlearn molecular model"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"from jaqpotpy.datasets import SmilesDataset\nfrom jaqpotpy.doa.doa import Leverage\nfrom jaqpotpy.models.evaluator import Evaluator\nfrom jaqpotpy.descriptors.molecular import MACCSKeysFingerprint\nfrom sklearn.metrics import accuracy_score, roc_auc_score\n\n# Declare the Featurizer and the Evaluator's metrics\nfeaturizer = TopologicalFingerprint()\nval = Evaluator()\nval.register_scoring_function('ACC', accuracy_score)\nval.register_scoring_function('AUC', roc_auc_score)\n# Create test dataset\ntrain_dataset = SmilesDataset(smiles = [train_smiles], y = [train_y], featurizer = featurizer, task='classification')\njaq_train.create()\n# Create validation dataset\nvalidation_dataset = SmilesDataset(smiles = [validation_smiles], y = [validation_y], featurizer = featurizer, task='classification')\nvalidation_dataset.create()\n#Update the Evaluator's dataset\nval.dataset = jaq_val\n")),(0,n.kt)("p",null,"Now you can create an sklearn model with the above inputs and perform various actions."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"from sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier()\nmodel = MolecularSKLearn(train_dataset,doa=Leverage(), model=knn, eval=val)\n# Fit the model \ntrained = model.fit()\n# Make a prediction on a smile\ntrained('Cc1cc(NS(=O)(=O)c2ccc(N)cc2)no1')\ntrained.prediction\n")))}d.isMDXComponent=!0}}]);